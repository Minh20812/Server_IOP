import requests
from bs4 import BeautifulSoup
import json
from datetime import datetime, timedelta
import time
import re
import pytz
import firebase_admin
from firebase_admin import credentials, firestore
from firebase_admin.firestore import SERVER_TIMESTAMP
from dotenv import load_dotenv
import os

class ProductHuntScraper:
    def __init__(self):
        self.base_url = "https://www.producthunt.com"
        self.headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
            'Accept-Language': 'en-US,en;q=0.5',
            'Accept-Encoding': 'gzip, deflate',
            'Connection': 'keep-alive',
            'Upgrade-Insecure-Requests': '1'
        }
        
        # Kh·ªüi t·∫°o Firebase
        self.db = None
        self.init_firebase()
        
    def init_firebase(self):
        """Kh·ªüi t·∫°o Firebase Admin SDK t·ª´ bi·∫øn m√¥i tr∆∞·ªùng"""
        try:
            # Load bi·∫øn m√¥i tr∆∞·ªùng
            load_dotenv()
            service_account_json = os.getenv("SERVICE_ACCOUNT_KEY")
            
            if not service_account_json:
                print("‚ö†Ô∏è C·∫£nh b√°o: Kh√¥ng t√¨m th·∫•y bi·∫øn SERVICE_ACCOUNT_KEY trong .env")
                print("üìã H∆∞·ªõng d·∫´n c·∫•u h√¨nh:")
                print("   1. T·∫°o file .env trong th∆∞ m·ª•c g·ªëc")
                print("   2. Th√™m d√≤ng: SERVICE_ACCOUNT_KEY='{json_content}'")
                print("   3. Script s·∫Ω ch·∫°y m√† kh√¥ng l∆∞u v√†o Firebase")
                return
            
            if not firebase_admin._apps:
                # Parse JSON chu·ªói th√†nh dict
                service_account_dict = json.loads(service_account_json)
                cred = credentials.Certificate(service_account_dict)
                firebase_admin.initialize_app(cred)
            
            self.db = firestore.client()
            print("‚úÖ Firebase ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o t·ª´ bi·∫øn m√¥i tr∆∞·ªùng")
            
        except Exception as e:
            print(f"‚ùå L·ªói kh·ªüi t·∫°o Firebase: {str(e)}")
            print("üí° Script s·∫Ω ti·∫øp t·ª•c ch·∫°y nh∆∞ng kh√¥ng l∆∞u v√†o Firebase")
        
    def get_yesterday_date(self):
        """L·∫•y ng√†y h√¥m qua theo m√∫i gi·ªù Vi·ªát Nam (UTC+7)"""
        # T·∫°o timezone Vi·ªát Nam
        vietnam_tz = pytz.timezone('Asia/Ho_Chi_Minh')
        
        # L·∫•y th·ªùi gian hi·ªán t·∫°i theo m√∫i gi·ªù Vi·ªát Nam
        now_vietnam = datetime.now(vietnam_tz)
        
        # L·∫•y ng√†y h√¥m qua
        yesterday = now_vietnam - timedelta(days=1)
        
        # Format theo ƒë·ªãnh d·∫°ng YYYY/M/D (kh√¥ng c√≥ s·ªë 0 ƒë·∫ßu)
        year = yesterday.year
        month = yesterday.month
        day = yesterday.day
        
        print(f"üïê Th·ªùi gian hi·ªán t·∫°i (VN): {now_vietnam.strftime('%Y-%m-%d %H:%M:%S')}")
        print(f"üìÖ Ng√†y c·∫ßn l·∫•y d·ªØ li·ªáu: {year}/{month}/{day}")
        
        return f"{year}/{month}/{day}"
    
    def build_url(self, date_str=None):
        """T·∫°o URL cho trang leaderboard theo ng√†y"""
        if date_str is None:
            date_str = self.get_yesterday_date()
        
        # Chuy·ªÉn ƒë·ªïi t·ª´ YYYY/M/D sang YYYY/M/D format cho URL
        url = f"{self.base_url}/leaderboard/daily/{date_str}?ref=header_nav"
        return url
    
    def scrape_products(self, url):
        """L·∫•y d·ªØ li·ªáu c√°c s·∫£n ph·∫©m t·ª´ trang leaderboard"""
        try:
            print(f"üåê ƒêang truy c·∫≠p: {url}")
            response = requests.get(url, headers=self.headers)
            response.raise_for_status()
            
            print(f"‚úÖ Truy c·∫≠p th√†nh c√¥ng! Status code: {response.status_code}")
            print(f"üìä K√≠ch th∆∞·ªõc response: {len(response.content)} bytes")
            
            soup = BeautifulSoup(response.content, 'html.parser')
            products = []
            
            # T√¨m c√°c section ch·ª©a th√¥ng tin s·∫£n ph·∫©m v·ªõi data-test="post-item-*"
            product_elements = soup.find_all('section', {'data-test': re.compile(r'post-item-\d+')})
            
            if not product_elements:
                print("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y section v·ªõi data-test='post-item-*', th·ª≠ t√¨m c√°ch kh√°c...")
                # Fallback: t√¨m sections c√≥ class ch·ª©a th√¥ng tin s·∫£n ph·∫©m
                product_elements = soup.find_all('section', class_=re.compile(r'.*group.*relative.*flex.*'))
                print(f"üîç T√¨m ƒë∆∞·ª£c {len(product_elements)} elements v·ªõi fallback method")
            
            print(f"üéØ T√¨m th·∫•y {len(product_elements)} s·∫£n ph·∫©m")
            
            for i, element in enumerate(product_elements[:20]):  # Gi·ªõi h·∫°n 20 s·∫£n ph·∫©m ƒë·∫ßu
                try:
                    print(f"üîÑ ƒêang x·ª≠ l√Ω s·∫£n ph·∫©m #{i+1}...")
                    product_data = self.extract_product_info(element, rank=i+1)  # Truy·ªÅn rank v√†o
                    if product_data and product_data['title'] != 'N/A':
                        products.append(product_data)
                        print(f"‚úÖ Th√†nh c√¥ng: #{product_data['rank']} - {product_data['title']}")
                    else:
                        print(f"‚ö†Ô∏è B·ªè qua s·∫£n ph·∫©m #{i+1} (kh√¥ng l·∫•y ƒë∆∞·ª£c t√™n)")
                except Exception as e:
                    print(f"‚ùå L·ªói khi x·ª≠ l√Ω s·∫£n ph·∫©m #{i+1}: {str(e)}")
                    continue
            
            print(f"üèÅ Ho√†n th√†nh! ƒê√£ l·∫•y ƒë∆∞·ª£c {len(products)} s·∫£n ph·∫©m h·ª£p l·ªá")
            return products
            
        except requests.RequestException as e:
            print(f"‚ùå L·ªói khi truy c·∫≠p trang: {str(e)}")
            return []
        except Exception as e:
            print(f"‚ùå L·ªói kh√¥ng x√°c ƒë·ªãnh: {str(e)}")
            return []
    
    def extract_product_info(self, element, rank):
        """Tr√≠ch xu·∫•t th√¥ng tin s·∫£n ph·∫©m t·ª´ element HTML - bao g·ªìm rank"""
        product = {
            'rank': rank,  # Th√™m field rank
            'title': 'N/A',
            'description': 'N/A',
            'link': 'N/A',
            'topics': [],
            'image': 'N/A',
            'date': self.get_yesterday_date()
        }
        
        try:
            # T√¨m t√™n s·∫£n ph·∫©m t·ª´ link v·ªõi data-test="post-name-*"
            name_link = element.find('a', {'data-test': re.compile(r'post-name-\d+')})
            if name_link:
                product['title'] = name_link.get_text(strip=True)
                # L·∫•y href ƒë·ªÉ t·∫°o link ƒë·∫ßy ƒë·ªß
                href = name_link.get('href')
                if href:
                    product['link'] = f"{self.base_url}{href}" if href.startswith('/') else href
                print(f"  üìù T√™n: {product['title']}")
            
            # T√¨m m√¥ t·∫£ (text-secondary trong c·∫•u tr√∫c)
            desc_element = element.find('a', class_=re.compile(r'.*text-secondary.*'))
            if desc_element:
                product['description'] = desc_element.get_text(strip=True)
                print(f"  üìÑ M√¥ t·∫£: {product['description'][:50]}...")
            
            # T√¨m topics/tags
            topic_links = element.find_all('a', href=re.compile(r'/topics/'))
            for link in topic_links:
                topic_name = link.get_text(strip=True)
                if topic_name:
                    product['topics'].append(topic_name)
            
            if product['topics']:
                print(f"  üè∑Ô∏è Topics: {', '.join(product['topics'])}")
            
            # T√¨m h√¨nh ·∫£nh
            img_element = element.find('img')
            if img_element:
                product['image'] = img_element.get('src') or img_element.get('srcset', '').split(' ')[0]
                print(f"  üñºÔ∏è C√≥ h√¨nh ·∫£nh: {product['image'][:50]}...")
            
            print(f"  üèÜ Rank: {product['rank']}")
            
        except Exception as e:
            print(f"  ‚ùå L·ªói khi tr√≠ch xu·∫•t th√¥ng tin: {str(e)}")
        
        return product
    
    def clear_collection(self, collection_name):
        """X√≥a to√†n b·ªô documents trong collection"""
        if not self.db:
            print("‚ùå Firebase ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o")
            return False
            
        try:
            print(f"üóëÔ∏è ƒêang x√≥a collection '{collection_name}'...")
            
            # L·∫•y t·∫•t c·∫£ documents
            docs = self.db.collection(collection_name).stream()
            
            # X√≥a t·ª´ng document
            deleted_count = 0
            for doc in docs:
                doc.reference.delete()
                deleted_count += 1
            
            print(f"‚úÖ ƒê√£ x√≥a {deleted_count} documents t·ª´ collection '{collection_name}'")
            return True
            
        except Exception as e:
            print(f"‚ùå L·ªói khi x√≥a collection: {str(e)}")
            return False
    
    def save_to_firestore(self, products, collection_name="producthunt", clear_existing=True):
        """L∆∞u danh s√°ch s·∫£n ph·∫©m v√†o Firestore - bao g·ªìm field rank"""
        if not self.db:
            print("‚ùå Firebase ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o - b·ªè qua vi·ªác l∆∞u v√†o database")
            return False
            
        if not products:
            print("‚ö†Ô∏è Kh√¥ng c√≥ s·∫£n ph·∫©m n√†o ƒë·ªÉ l∆∞u")
            return False
        
        try:
            # LU√îN x√≥a collection c≈© tr∆∞·ªõc khi l∆∞u d·ªØ li·ªáu m·ªõi
            print(f"üóëÔ∏è ƒêang x√≥a to√†n b·ªô d·ªØ li·ªáu c≈© trong collection '{collection_name}'...")
            clear_success = self.clear_collection(collection_name)
            
            if not clear_success:
                print("‚ö†Ô∏è C√≥ l·ªói khi x√≥a d·ªØ li·ªáu c≈©, nh∆∞ng v·∫´n ti·∫øp t·ª•c l∆∞u d·ªØ li·ªáu m·ªõi...")
            
            print(f"üíæ ƒêang l∆∞u {len(products)} s·∫£n ph·∫©m m·ªõi v√†o Firestore...")
            
            saved_count = 0
            for product in products:
                doc_data = {
                    'rank': product['rank'],
                    'date': product['date'],
                    'description': product['description'],
                    'title': product['title'],
                    'image': product['image'],
                    'link': product['link'],
                    'topics': product['topics']
                }
                
                # L∆∞u v√†o Firestore
                doc_ref = self.db.collection(collection_name).document()
                doc_ref.set(doc_data)
                saved_count += 1
                
                print(f"  ‚úÖ ƒê√£ l∆∞u: #{product['rank']} - {product['title']}")
            
            print(f"üéâ Th√†nh c√¥ng! ƒê√£ thay th·∫ø to√†n b·ªô d·ªØ li·ªáu c≈© b·∫±ng {saved_count} s·∫£n ph·∫©m m·ªõi trong collection '{collection_name}'")
            return True
            
        except Exception as e:
            print(f"‚ùå L·ªói khi l∆∞u v√†o Firestore: {str(e)}")
            return False
    
    def save_to_json(self, products, filename=None):
        """L∆∞u d·ªØ li·ªáu ra file JSON (backup method) - bao g·ªìm field rank"""
        if not products:
            print("‚ö†Ô∏è Kh√¥ng c√≥ s·∫£n ph·∫©m n√†o ƒë·ªÉ l∆∞u")
            return False
        
        try:
            if filename is None:
                date_str = self.get_yesterday_date().replace('/', '-')
                filename = f"producthunt_{date_str}.json"
            
            # Chu·∫©n b·ªã d·ªØ li·ªáu bao g·ªìm rank
            data = {
                'date': self.get_yesterday_date(),
                'scraped_at': datetime.now().isoformat(),
                'total_products': len(products),
                'products': [{
                    'rank': product['rank'],  # Th√™m rank v√†o JSON
                    'date': product['date'],
                    'description': product['description'],
                    'title': product['title'],
                    'image': product['image'],
                    'link': product['link'],
                    'topics': product['topics']
                } for product in products]
            }
            
            # L∆∞u file
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
            
            print(f"üíæ ƒê√£ l∆∞u {len(products)} s·∫£n ph·∫©m v√†o file: {filename}")
            return True
            
        except Exception as e:
            print(f"‚ùå L·ªói khi l∆∞u file JSON: {str(e)}")
            return False
    
    def print_detailed_results(self, products):
        """In k·∫øt qu·∫£ chi ti·∫øt ra console - bao g·ªìm rank"""
        if not products:
            print("‚ùå Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m n√†o!")
            return
        
        date_str = self.get_yesterday_date()
        print(f"\n{'='*80}")
        print(f"üèÜ S·∫¢N PH·∫®M HOT NH·∫§T NG√ÄY {date_str}")
        print(f"üìä T·ªïng s·ªë s·∫£n ph·∫©m t√¨m th·∫•y: {len(products)}")
        print(f"{'='*80}")
        
        for product in products:
            print(f"\nüèÜ #{product['rank']} - {product['title']}")
            print(f"   üìÖ Ng√†y: {product['date']}")
            print(f"   üìù M√¥ t·∫£: {product['description']}")
            if product['topics']:
                print(f"   üè∑Ô∏è Topics: {', '.join(product['topics'])}")
            print(f"   üîó Link: {product['link']}")
            if product['image'] != 'N/A':
                print(f"   üñºÔ∏è Image: {product['image']}")
            print(f"   {'-'*70}")
        
        print(f"\nüéâ Ho√†n th√†nh! ƒê√£ hi·ªÉn th·ªã {len(products)} s·∫£n ph·∫©m h√†ng ƒë·∫ßu")
        print(f"‚è∞ Th·ªùi gian x·ª≠ l√Ω: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    def run(self, save_to_db=True, save_to_file=True):
        """Ch·∫°y script ch√≠nh"""
        print("üöÄ B·∫ÆT ƒê·∫¶U L·∫§Y D·ªÆ LI·ªÜU T·ª™ PRODUCT HUNT")
        print("="*50)
        
        # T·∫°o URL cho ng√†y h√¥m qua
        print("üìÖ ƒêang x√°c ƒë·ªãnh ng√†y c·∫ßn l·∫•y d·ªØ li·ªáu...")
        url = self.build_url()
        print(f"üîó URL ƒë∆∞·ª£c t·∫°o: {url}")
        
        # L·∫•y d·ªØ li·ªáu
        print("\nüîç B·∫Øt ƒë·∫ßu qu√° tr√¨nh scraping...")
        products = self.scrape_products(url)
        
        if products:
            print(f"\n‚úÖ TH√ÄNH C√îNG! ƒê√£ l·∫•y ƒë∆∞·ª£c {len(products)} s·∫£n ph·∫©m")
            
            # In k·∫øt qu·∫£ chi ti·∫øt
            self.print_detailed_results(products)
            
            # L∆∞u v√†o Firestore n·∫øu ƒë∆∞·ª£c y√™u c·∫ßu
            if save_to_db:
                print(f"\nüíæ ƒêang thay th·∫ø d·ªØ li·ªáu c≈© v√† l∆∞u d·ªØ li·ªáu m·ªõi v√†o Firestore...")
                success = self.save_to_firestore(products)
                if success:
                    print("‚úÖ D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c thay th·∫ø th√†nh c√¥ng trong Firestore!")
                else:
                    print("‚ùå C√≥ l·ªói khi thay th·∫ø d·ªØ li·ªáu trong Firestore")
            
            # L∆∞u v√†o file JSON nh∆∞ backup
            if save_to_file:
                print(f"\nüìÑ ƒêang l∆∞u backup v√†o file JSON...")
                self.save_to_json(products)
            
        else:
            print("\n‚ùå TH·∫§T B·∫†I! Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu")
            print("üîç C√≥ th·ªÉ do c√°c nguy√™n nh√¢n sau:")
            print("   ‚Ä¢ Trang web thay ƒë·ªïi c·∫•u tr√∫c HTML")
            print("   ‚Ä¢ Server ch·∫∑n request (anti-bot)")
            print("   ‚Ä¢ K·∫øt n·ªëi internet kh√¥ng ·ªïn ƒë·ªãnh")
            print("   ‚Ä¢ URL kh√¥ng ch√≠nh x√°c ho·∫∑c trang kh√¥ng t·ªìn t·∫°i")
            print("\nüí° G·ª£i √Ω kh·∫Øc ph·ª•c:")
            print("   ‚Ä¢ Th·ª≠ l·∫°i sau v√†i ph√∫t")
            print("   ‚Ä¢ Ki·ªÉm tra k·∫øt n·ªëi internet")
            print("   ‚Ä¢ C·∫≠p nh·∫≠t User-Agent header")

# Ch·∫°y script
if __name__ == "__main__":
    print("üîß C·∫§U H√åNH FIREBASE")
    print("="*30)
    print("üí° S·ª≠ d·ª•ng bi·∫øn m√¥i tr∆∞·ªùng:")
    print("   1. T·∫°o file .env trong th∆∞ m·ª•c g·ªëc")
    print("   2. Th√™m: SERVICE_ACCOUNT_KEY='{n·ªôi dung JSON service account key}'")
    print("   3. Ch·∫°y script")
    print("\nüéØ CH√çNH S√ÅCH L∆ØU TR·ªÆ:")
    print("   ‚Ä¢ M·ªói l·∫ßn ch·∫°y s·∫Ω X√ìA TO√ÄN B·ªò d·ªØ li·ªáu c≈©")
    print("   ‚Ä¢ Sau ƒë√≥ l∆∞u d·ªØ li·ªáu m·ªõi v√†o collection 'producthunt'")
    print("   ‚Ä¢ ƒê·∫£m b·∫£o d·ªØ li·ªáu lu√¥n l√† m·ªõi nh·∫•t")
    print("\nüéØ C√ÅC FIELD ƒê∆Ø·ª¢C L∆ØU:")
    print("   ‚Ä¢ rank (m·ªõi)")
    print("   ‚Ä¢ date")
    print("   ‚Ä¢ description") 
    print("   ‚Ä¢ title")
    print("   ‚Ä¢ image")
    print("   ‚Ä¢ link")
    print("   ‚Ä¢ topics")
    print("\n" + "="*50)
    
    # Kh·ªüi t·∫°o scraper
    scraper = ProductHuntScraper()
    
    # Ch·∫°y v·ªõi c·∫£ hai t√πy ch·ªçn l∆∞u tr·ªØ
    scraper.run(save_to_db=True, save_to_file=True)